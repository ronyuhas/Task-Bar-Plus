<UserControl x:Class="TaskBarPlus.Views.Controls.Utilities"  
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"   
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"   
             xmlns:svg="https://github.com/dotnetprojects/SVGImage"  
             xmlns:local="clr-namespace:TaskBarPlus"  
             xmlns:converters="clr-namespace:TaskBarPlus.Views.Converters"
             mc:Ignorable="d"   
             d:DesignHeight="450" d:DesignWidth="800">  
    <Control.Resources>
        <converters:BooleanToTextConverter x:Key="BoolToTextConverter"/>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   SnapsToDevicePixels="true" StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD" />
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070" />
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD" />
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6" />
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />
        <Style x:Key="RoundButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="20" Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border"
                                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border"
                                Value="{StaticResource Button.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="border"
                                Value="{StaticResource Button.MouseOver.Border}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border"
                                Value="{StaticResource Button.Pressed.Background}" />
                                <Setter Property="BorderBrush" TargetName="border"
                                Value="{StaticResource Button.Pressed.Border}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border"
                                Value="{StaticResource Button.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="border"
                                Value="{StaticResource Button.Disabled.Border}" />
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                Value="{StaticResource Button.Disabled.Foreground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Control.Resources>  
    <Grid>  
        <Button Style="{DynamicResource RoundButtonStyle}" Name="UserButton"  
                Click="UserButton_Click"  
                Width="40" Height="40">  
            <!-- Fix for XDG0010: Ensure the resource path is correct and matches the actual location -->
            <svg:SVGImage UriSource="pack://application:,,,/Task Bar Plus;component/Resources/SVGs/Gear.svg" SizeType="SizeToContent" UseAnimations="True"  
                          RenderTransformOrigin="0.25,0.25" VerticalContentAlignment="Center"  
                          HorizontalContentAlignment="Center" Margin="2" />  
        </Button>
        <Popup Name="UtilityPopup" PlacementTarget="{Binding ElementName=UserButton}" Placement="Bottom"  
               StaysOpen="False" Opacity=".85" AllowsTransparency="True" Opened="UtilityPopup_Opened" >  
            <Popup.Effect>  
                <DropShadowEffect />  
            </Popup.Effect>  
            <Border Background="Gray" BorderBrush="Black" BorderThickness="1" CornerRadius="5">  
                <StackPanel Background="LightGray" Margin="10">
                    <svg:SVGImage UriSource="{Binding ImageSource}" SizeType="SizeToContent" Width="40" Height="40"  
                                  UseAnimations="True"  
                                  RenderTransformOrigin="0.5,0.5" VerticalContentAlignment="Center"  
                                  HorizontalContentAlignment="Center" Margin="10" />
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="10,0,0,0">
                        <Label Content="Refresh Rate:" Margin="10" VerticalAlignment="Center"/>
                        <ComboBox x:Name="RefreshRateComboBox" Width="100" Margin="10"
                            SelectedIndex="1" SelectionChanged="RefreshRateComboBox_SelectionChanged">
                            <ComboBoxItem Content="1 second" Tag="1"/>
                            <ComboBoxItem Content="5 seconds" Tag="5"/>
                            <ComboBoxItem Content="10 seconds" Tag="10"/>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="10">
                        <Label Content="Open with Double Click:" Margin="10"/>

                        <ToggleButton x:Name="DoubleClickToggle"
                          Width="60" Height="30" IsChecked="{Binding Source={x:Static local:Settings.Default}, Path=RequireDoubleClick, Mode=TwoWay}" Style="{StaticResource ToggleSwitchStyle}"/>
                    </StackPanel>
                    <CheckBox Content="Group by Executable Name" IsChecked="{Binding Source={x:Static local:Settings.Default}, Path=IsGroupingEnabled, Mode=TwoWay}" Margin="20,10,10,10"/>
                    <TextBlock Text="{Binding UserPrivileges}" FontWeight="Bold" HorizontalAlignment="Center" />  
                    <Button Content="Exit" Style="{DynamicResource RoundButtonStyle}" Height="40" Width="180"  
                            Background="LightBlue" Foreground="Black" FontWeight="Bold" Margin="10"
                            Click="Exit_Click"/>  
                </StackPanel>  
            </Border>  
        </Popup>  
    </Grid>  
</UserControl>